[{"/home/peter/Documents/mat-tracker/client/src/index.tsx":"1","/home/peter/Documents/mat-tracker/client/src/App.tsx":"2","/home/peter/Documents/mat-tracker/client/src/RoutingConfig.tsx":"3","/home/peter/Documents/mat-tracker/client/src/Home.tsx":"4","/home/peter/Documents/mat-tracker/client/src/MatTrackerDAO/MatTrackerData.tsx":"5","/home/peter/Documents/mat-tracker/client/src/pages/MemberPage.tsx":"6","/home/peter/Documents/mat-tracker/client/src/pages/CreateMemberPage.tsx":"7","/home/peter/Documents/mat-tracker/client/src/components/MemberSearch.tsx":"8","/home/peter/Documents/mat-tracker/client/src/components/Members.tsx":"9","/home/peter/Documents/mat-tracker/client/src/components/Member.tsx":"10"},{"size":146,"mtime":1637670556247,"results":"11","hashOfConfig":"12"},{"size":141,"mtime":1637755230380,"results":"13","hashOfConfig":"12"},{"size":1845,"mtime":1637670556247,"results":"14","hashOfConfig":"12"},{"size":801,"mtime":1637757593259,"results":"15","hashOfConfig":"12"},{"size":558,"mtime":1637670851683,"results":"16","hashOfConfig":"12"},{"size":1988,"mtime":1637671590814,"results":"17","hashOfConfig":"12"},{"size":5214,"mtime":1637670846243,"results":"18","hashOfConfig":"12"},{"size":441,"mtime":1637525283436,"results":"19","hashOfConfig":"12"},{"size":1001,"mtime":1637574892688,"results":"20","hashOfConfig":"12"},{"size":670,"mtime":1637525283436,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fi8b5k",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},"/home/peter/Documents/mat-tracker/client/src/index.tsx",[],"/home/peter/Documents/mat-tracker/client/src/App.tsx",[],"/home/peter/Documents/mat-tracker/client/src/RoutingConfig.tsx",[],"/home/peter/Documents/mat-tracker/client/src/Home.tsx",["45"],"/home/peter/Documents/mat-tracker/client/src/MatTrackerDAO/MatTrackerData.tsx",[],"/home/peter/Documents/mat-tracker/client/src/pages/MemberPage.tsx",["46"],"import { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport {\n  getMembersInput,\n  getMembersResponse,\n} from \"../MatTrackerDAO/MatTrackerDataTypes\";\nimport { getMembers } from \"../MatTrackerDAO/MatTrackerData\";\n\ninterface MemberPageInput {\n  getMembersFunction?: ({\n    name,\n  }: getMembersInput) => Promise<getMembersResponse[]>;\n  setMembers?: any;\n}\n\nexport default function MemberPage({\n  setMembers,\n  getMembersFunction = getMembers,\n}: MemberPageInput) {\n  const { id, name, phone, belt, joined } = useParams();\n  const [deleted, setDeleted] = useState(false);\n\n  async function onDelete() {\n    try {\n      const response = await fetch(\"/members/\" + id, {\n        method: \"DELETE\",\n        headers: { \"Content-type\": \"application/json\" },\n      });\n\n      const response2 = await getMembersFunction({ name: \"\" });\n      setMembers(response2);\n      setDeleted(true);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div id=\"memberPage\">\n      <div\n        id=\"memberInfoContainer\"\n        style={{ display: deleted === false ? \"flex\" : \"none\" }}\n      >\n        <div className=\"memberInfoElement\">\n          <h3>Name:</h3> {name}\n        </div>\n        <div className=\"memberInfoElement\">\n          <h3>Phone number:</h3> {phone}\n        </div>\n        <div className=\"memberInfoElement\">\n          <h3>Belt:</h3> {belt}\n        </div>\n        <div className=\"memberInfoElement\">\n          <h3>Joined at:</h3> {joined}\n        </div>\n        <button data-testid=\"delete\" onClick={onDelete}>\n          delete\n        </button>\n        <Link className=\"homeLink\" to=\"/\">\n          Home\n        </Link>\n      </div>\n      <div\n        id=\"memberDeleted\"\n        style={{ display: deleted === false ? \"none\" : \"flex\" }}\n      >\n        <h2>Member deleted, navigate back to home</h2>\n        <Link className=\"homeLink\" to=\"/\">\n          Home\n        </Link>\n      </div>\n    </div>\n  );\n}\n","/home/peter/Documents/mat-tracker/client/src/pages/CreateMemberPage.tsx",["47","48"],"import { parse } from \"querystring\";\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { getMembers } from \"../MatTrackerDAO/MatTrackerData\";\nimport {\n  getMembersResponse,\n  getMembersInput,\n} from \"../MatTrackerDAO/MatTrackerDataTypes\";\n\ntype CreateMemberPageInput = {\n  handleChange?: (event: any) => void;\n  handleSubmit?: (event: any) => void;\n  getMembersFunction?: ({\n    name,\n  }: getMembersInput) => Promise<getMembersResponse[]>;\n  setMembers?: any;\n};\n\nexport default function CreateMemberPage({\n  handleChange,\n  handleSubmit,\n  getMembersFunction = getMembers,\n  setMembers,\n}: CreateMemberPageInput) {\n  let [memberInput, setMemberInput] = useState<any>({\n    member_name: \"\",\n    member_phone: \"\",\n    member_belt: \"\",\n    member_joined_at: \"\",\n  });\n  const [memberAdded, setMemberAdded] = useState(false);\n  const date = new Date();\n  const month = date.getMonth() + 1;\n  const dateInput = date.getFullYear() + \"-\" + month + \"-\" + date.getDate();\n  console.log(memberInput);\n  useEffect(() => {\n    async function addMember() {\n      if (Object.values(memberInput).every((key) => key !== \"\")) {\n        try {\n          //proxy is only used in developement so it will be ignored in production builds\n          //so if there is no localhost then by default it will use heroku\n          //remember this heroku app is just our server serving the build static content and also holding the restful api\n\n          const body = memberInput;\n          const response = await fetch(\"/members\", {\n            method: \"POST\",\n            headers: { \"Content-type\": \"application/json\" },\n            body: JSON.stringify(body),\n          });\n\n          const response2 = await getMembersFunction({ name: \"\" });\n          setMembers(response2);\n          console.log(response);\n          memberInput = {};\n          setMemberAdded(true);\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }\n    addMember();\n  }, [memberInput]);\n\n  if (handleSubmit === undefined) {\n    handleSubmit = (e: any) => {\n      e.preventDefault();\n\n      if (memberInput.member_name === \"\") {\n        alert(\"please enter your name\");\n        return;\n      }\n\n      if (memberInput.member_phone === \"\") {\n        alert(\"please enter your phone number\");\n        return;\n      } else {\n        if (isNaN(parseInt(memberInput.member_phone))) {\n          alert(\"please only enter numbers in phone field\");\n          return;\n        }\n\n        if (\n          memberInput.member_phone.length < 10 ||\n          memberInput.member_phone.length > 11\n        ) {\n          alert(\"Your phone number is not valid\");\n          return;\n        }\n      }\n\n      if (memberInput.member_belt === \"\") {\n        setMemberInput((values: {}) => ({ ...values, member_belt: \"white\" }));\n      }\n      if (memberInput.member_joined_at === \"\") {\n        setMemberInput((values: {}) => ({\n          ...values,\n          member_joined_at: dateInput,\n        }));\n      }\n      console.log(memberInput);\n    };\n  }\n\n  if (handleChange === undefined) {\n    handleChange = (event: any) => {\n      const name = event.target.name;\n      const value = event.target.value;\n      setMemberInput((values: {}) => ({ ...values, [name]: value }));\n    };\n  }\n\n  return (\n    <div id=\"memberInputFormContainer\">\n      <form\n        id=\"memberInputForm\"\n        style={{ display: memberAdded ? \"none\" : \"block\" }}\n      >\n        <div className=\"memberInputElement\">\n          Name:\n          <input\n            onChange={handleChange}\n            name=\"member_name\"\n            className=\"memberInput\"\n            data-testid=\"name\"\n          ></input>\n        </div>\n        <div className=\"memberInputElement\">\n          Phone number:\n          <input\n            onChange={handleChange}\n            name=\"member_phone\"\n            className=\"memberInput\"\n            data-testid=\"phone\"\n          ></input>\n        </div>\n        <div className=\"memberInputElement\">\n          Belt:\n          <select\n            onChange={handleChange}\n            name=\"member_belt\"\n            data-testid=\"beltInput\"\n            className=\"memberInput\"\n          >\n            <option value=\"white\">white</option>\n            <option value=\"blue\">blue</option>\n            <option value=\"purple\">purple</option>\n            <option value=\"brown\">brown</option>\n            <option value=\"black\">black</option>\n          </select>\n        </div>\n        <div className=\"memberInputElement\">\n          Joined:\n          <input\n            name=\"member_joined_at\"\n            className=\"memberInput\"\n            type=\"date\"\n            data-testid=\"joined\"\n            onChange={handleChange}\n            defaultValue={dateInput}\n          />\n        </div>\n        <input data-testid=\"submit\" onClick={handleSubmit} type=\"submit\" />\n      </form>\n\n      <Link className=\"homeLink\" to=\"/\">\n        Home\n      </Link>\n      <div\n        id=\"memberAddedNotification\"\n        style={{ display: memberAdded ? \"flex\" : \"none\" }}\n      >\n        <h3 id=\"memberAddedMessage\">Member added! Navigate back to home.</h3>\n\n        <Link className=\"homeLink\" to=\"/\">\n          Home\n        </Link>\n      </div>\n    </div>\n  );\n}\n","/home/peter/Documents/mat-tracker/client/src/components/MemberSearch.tsx",[],"/home/peter/Documents/mat-tracker/client/src/components/Members.tsx",[],"/home/peter/Documents/mat-tracker/client/src/components/Member.tsx",["49","50"],"import React from \"react\";\nimport { Link, Route } from \"react-router-dom\";\nimport { getMembersResponse } from \"../MatTrackerDAO/MatTrackerDataTypes\";\n\ninterface memberInput {\n  member: getMembersResponse;\n}\n\nconst Member = ({ member }: memberInput) => {\n  return (\n    <button className=\"memberButton\">\n      <h3>{member.member_name}</h3>\n      <div\n        style={{\n          backgroundColor:\n            member !== undefined\n              ? member.member_belt === null || undefined\n                ? \"white\"\n                : member.member_belt\n              : \"white\",\n        }}\n        data-testid=\"belt\"\n      ></div>\n    </button>\n  );\n};\n\nexport default Member;\n",{"ruleId":"51","severity":1,"message":"52","line":5,"column":3,"nodeType":"53","messageId":"54","endLine":5,"endColumn":18},{"ruleId":"51","severity":1,"message":"55","line":26,"column":13,"nodeType":"53","messageId":"54","endLine":26,"endColumn":21},{"ruleId":"51","severity":1,"message":"56","line":1,"column":10,"nodeType":"53","messageId":"54","endLine":1,"endColumn":15},{"ruleId":"57","severity":1,"message":"58","line":54,"column":25,"nodeType":"59","endLine":54,"endColumn":27},{"ruleId":"51","severity":1,"message":"60","line":2,"column":10,"nodeType":"53","messageId":"54","endLine":2,"endColumn":14},{"ruleId":"51","severity":1,"message":"61","line":2,"column":16,"nodeType":"53","messageId":"54","endLine":2,"endColumn":21},"@typescript-eslint/no-unused-vars","'getMembersInput' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'parse' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'memberInput' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","'Link' is defined but never used.","'Route' is defined but never used."]