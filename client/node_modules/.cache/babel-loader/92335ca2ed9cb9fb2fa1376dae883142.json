{"ast":null,"code":"import _regeneratorRuntime from\"/home/peter/Documents/mat-tracker/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/peter/Documents/mat-tracker/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";function getMembers(_x){return _getMembers.apply(this,arguments);}function _getMembers(){_getMembers=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref){var name,initMembers,initMembersJSON,members;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:name=_ref.name;_context.next=3;return fetch(\"/members\");case 3:initMembers=_context.sent;_context.next=6;return initMembers.json();case 6:initMembersJSON=_context.sent;if(!(name===\"\")){_context.next=9;break;}return _context.abrupt(\"return\",initMembersJSON);case 9:members=initMembersJSON.filter(function(member){return member.member_name!==null&&member.member_name.toUpperCase().includes(name.toUpperCase());});return _context.abrupt(\"return\",members);case 11:case\"end\":return _context.stop();}}},_callee);}));return _getMembers.apply(this,arguments);}export{getMembers};","map":{"version":3,"sources":["/home/peter/Documents/mat-tracker/client/src/MatTrackerDAO/MatTrackerData.tsx"],"names":["getMembers","name","fetch","initMembers","json","initMembersJSON","members","filter","member","member_name","toUpperCase","includes"],"mappings":"mUAEeA,CAAAA,U,0IAAf,oLACEC,IADF,MACEA,IADF,uBAG4BC,CAAAA,KAAK,CAAC,UAAD,CAHjC,QAGQC,WAHR,qCAIiCA,CAAAA,WAAW,CAACC,IAAZ,EAJjC,QAIQC,eAJR,oBAMMJ,IAAI,GAAK,EANf,0DAOWI,eAPX,SASQC,OATR,CASkBD,eAAe,CAACE,MAAhB,CACd,SAACC,MAAD,QACEA,CAAAA,MAAM,CAACC,WAAP,GAAuB,IAAvB,EACAD,MAAM,CAACC,WAAP,CAAmBC,WAAnB,GAAiCC,QAAjC,CAA0CV,IAAI,CAACS,WAAL,EAA1C,CAFF,EADc,CATlB,iCAcSJ,OAdT,yD,6CAiBA,OAASN,UAAT","sourcesContent":["import { getMembersInput, getMembersResponse } from \"./MatTrackerDataTypes\";\n\nasync function getMembers({\n  name,\n}: getMembersInput): Promise<getMembersResponse[]> {\n  const initMembers = await fetch(\"/members\");\n  const initMembersJSON = (await initMembers.json()) as getMembersResponse[];\n\n  if (name === \"\") {\n    return initMembersJSON;\n  }\n  const members = initMembersJSON.filter(\n    (member) =>\n      member.member_name !== null &&\n      member.member_name.toUpperCase().includes(name.toUpperCase())\n  );\n  return members;\n}\n\nexport { getMembers };\n"]},"metadata":{},"sourceType":"module"}